name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Linters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22, 24]
    steps:
      - uses: actions/checkout@v5

      - name: Set Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run Linters
        run: |
          yarn lint
          yarn prettier:check
          yarn typecheck

  build:
    name: Check NextJS Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22, 24]
    steps:
      - uses: actions/checkout@v5

      - name: Set Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Generate Build
        run: |
          yarn build

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22, 24]
    steps:
      - uses: actions/checkout@v5

      - name: Set Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Install Dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Run Tests
        run: |
          yarn test:ci

      - name: Collect Coverage
        if: "!contains(github.event.pull_request.labels.*.name, 'dependencies')"
        run: |
          yarn coverage

      - name: Upload Coverage Reports to Codecov
        if: "!contains(github.event.pull_request.labels.*.name, 'dependencies')"
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
